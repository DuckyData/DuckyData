@model DuckyData1._0._0Alpha.Models.ResetPasswordViewModel
@{
    ViewBag.Title = "Reset password";
}

<h2>@ViewBag.Title.</h2>

@using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Reset your password.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Code)

    <div id="passwordError" class="text-danger"></div>
    <div id="confirmError" class="text-danger"></div>

    <div class="form-group">
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email", @readonly = "readonly" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input id="resetButton" type="submit" class="btn btn-default" value="Reset" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var pError = $('#passwordError');
            var cError = $('#confirmError');

            // Reset button disabled by default
            $('#resetButton').prop('disabled', true);

            $('#@Html.IdFor(model => model.Password)').on("change keyup paste", function () {
                var password = $('#@Html.IdFor(model => model.Password)');

                var re = /^.*(?=.{6,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@@#$%^&+=]).*$/;
                if (re.test(password.val())) {
                    if (password.length < 10) {
                        pError.html("");
                    }
                    else {
                        pError.html("Password must be at least 6 - 10 characters");
                    }
                } else {
                    pError.html("Passwords must contain at least one  lower case letter, one upper case letter, one digit and one valid special character" +
                                "<br />" +
                                "valid special characters are: @@#$%^&+="
                    );

                    if (password.length < 6 || password.length > 10) {
                        pError.html(pError.html() + "<br />" + "Password must be at least 6 - 10 characters");
                    }
                    else {
                        pError.html("");
                    }
                }

                ValidateForm();
            });

            $('#@Html.IdFor(model => model.ConfirmPassword)').on("change keyup", function () {
                if ($('#@Html.IdFor(model => model.Password)').val() == $('#@Html.IdFor(model => model.ConfirmPassword)').val()) {
                    cError.html("");
                } else {
                    cError.html("The password and confirmation password do not match.");
                }

                ValidateForm();
            });
        });

        function ValidateForm() {
            var pError = $('#passwordError');
            var cError = $('#confirmError');

            if (pError.html() == "" && cError.html() == "") {
                $('#resetButton').prop('disabled', false);
            }
            else {
                $('#resetButton').prop('disabled', true);
            }
        }

    </script>
}
