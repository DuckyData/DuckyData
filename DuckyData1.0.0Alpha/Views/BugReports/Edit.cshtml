@model DuckyData1._0._0Alpha.Models.BugReport

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>BugReport</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.subject, new { htmlAttributes = new { @class = "form-control",@readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.subject, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.category, new { htmlAttributes = new { @class = "form-control",@readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.category, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.body,htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.body,new { htmlAttributes = new { @class = "form-control",@readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.body,"",new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.submittedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.submittedBy, new { htmlAttributes = new { @class = "form-control",@readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.submittedBy, "", new { @class = "text-danger" })
            </div>
        </div>

      
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" name="command" value="Save the Change" class="btn col-md-10 btn-primary" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
               <input readonly value="Close the Bug Report" class="btn col-md-10 btn-danger" data-toggle="modal" data-target="#closeTheReport" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index") | 
    @Html.ActionLink("Create Follow Ups","Create","FollowUps")
</div>

<div class="modal fade confirm-modal" id="closeTheReport" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">Confirm</h4>
      </div>
      <div class="modal-body">
        Are you sure you want to close this bug report, this will automaticly send message to user with the update.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-sm pull-left" data-dismiss="modal">Cancel</button>
        @using(Html.BeginForm())
        {@Html.AntiForgeryToken()
            <input type="submit" name="command" value="Finalize" class="btn btn-danger btn-sm pull-right" />
        }
      </div>
    </div>
  </div>
</div>
